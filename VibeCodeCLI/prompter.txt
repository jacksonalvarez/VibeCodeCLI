TETRIS AI SPECIFICATION - PYGAME IMPLEMENTATION (NO SOUND) OVERVIEW Build a complete and functional Tetris game in Python using the Pygame library. The game should follow standard Tetris rules and include advanced features such as a hold system, hard drop, high score saving, and a responsive user interface. This version omits all sound requirements for simplicity and portability. FILE STRUCTURE tetris/ ├── main.py # Entry point and game loop ├── settings.py # Constants and configuration values ├── game.py # Game logic and state manager ├── tetromino.py # Tetromino shape logic ├── utils.py # Helper functions (rotation, collision, etc.) ├── highscore.py # Functions for high score loading/saving ├── assets/ │ └── font.ttf # Optional custom font (fallback to default if missing) └── highscore.txt # Stores highest score locally GAME LOGIC - Grid dimensions: 10 columns × 20 rows - Each Tetromino consists of 4 blocks - Game uses a 2D list to represent grid state - Pieces fall automatically every few frames - When a piece collides and cannot move further, it locks into the grid - Full rows are detected and cleared, increasing score - Game ends if a new piece cannot spawn due to blocked space TETROMINOES Include all 7 standard Tetromino shapes: - I, O, T, S, Z, J, L - Each has 4 rotation states (0, 90, 180, 270 degrees) - Rotations use a center pivot or rotation matrix - Assign each shape a unique color GAMEPLAY FEATURES 1. HOLD SYSTEM - Pressing C holds the current piece - If no piece is held, store current and spawn next - If a piece is already held, swap it with the current piece - Only allow one hold per drop cycle (use a hold_used flag) - Reset hold flag after locking a piece 2. HARD DROP - Pressing Space instantly drops the current piece to the lowest valid row - After drop, the piece locks immediately 3. LINE CLEARING - Detect full rows after locking a piece - Clear all full lines and shift above rows down - Award points based on number of lines cleared at once 4. SCORE + LEVEL - Track and display current score - Increase level based on lines cleared - Fall speed increases with level 5. GAME OVER - If a piece spawns overlapping locked blocks, game ends - Display "Game Over" screen - Compare score with high score, update if higher HIGH SCORE SAVING - Save high score in plain text file: highscore.txt - On game start, load previous high score - After game over, save score if it exceeds previous high score INPUT CONTROLS | Key | Action | |-------|--------------------| | LEFT | Move left | | RIGHT | Move right | | DOWN | Soft drop | | UP | Rotate clockwise | | SPACE | Hard drop | | C | Hold current piece | | ESC | Quit game | UI REQUIREMENTS - Display grid (10x20), showing active, locked, and optionally ghost blocks - Show "Next" tetromino in preview area - Show "Hold" tetromino - Show score, high score, and level - On game over: display final score and high score OPTIONAL FEATURES (IGNORE FOR MVP) - Ghost piece (projection of hard drop) - Pause menu - Custom themes or skins - Multiplayer DEPENDENCIES - Python 3.8+ - Pygame (pip install pygame) - Font file is optional; fallback to default font if not available FINAL OUTPUT The game should run by executing main.py. It should open a Pygame window and function without errors. All UI elements should be displayed correctly. The game should feel responsive and mimic classic Tetris behavior. Sound is not required.